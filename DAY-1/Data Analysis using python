
{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3538,"sourceType":"datasetVersion","datasetId":792}],"dockerImageVersionId":31012,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-21T05:22:20.893866Z","iopub.execute_input":"2025-04-21T05:22:20.894139Z","iopub.status.idle":"2025-04-21T05:22:23.321758Z","shell.execute_reply.started":"2025-04-21T05:22:20.894117Z","shell.execute_reply":"2025-04-21T05:22:23.320063Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/noshowappointments/KaggleV2-May-2016.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"# Task 1: Data Cleaning and Preprocessing","metadata":{}},{"cell_type":"markdown","source":"**Key Cleaning Decisions Made:**\n\nMissing Data: Critical columns with missing values were dropped, while less critical ones were imputed\n\nData Types: Ensured dates are datetime objects and categorical variables are standardized\n\nAge Data: Removed negative ages which are biologically impossible\n\nHandcap Variable: Converted to binary (0/1) for consistency\n\nDuplicates: Removed exact duplicate appointments while flagging potential patient-day duplicates\n\nNew Features: Added calculated fields like wait time and age groups for analysis","metadata":{}},{"cell_type":"markdown","source":"# Data set is load in python using pandas library creating dataframe as 'df'","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/noshowappointments/KaggleV2-May-2016.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T05:25:38.092193Z","iopub.execute_input":"2025-04-21T05:25:38.092500Z","iopub.status.idle":"2025-04-21T05:25:38.376679Z","shell.execute_reply.started":"2025-04-21T05:25:38.092477Z","shell.execute_reply":"2025-04-21T05:25:38.375958Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T05:25:50.880853Z","iopub.execute_input":"2025-04-21T05:25:50.881209Z","iopub.status.idle":"2025-04-21T05:25:50.942461Z","shell.execute_reply.started":"2025-04-21T05:25:50.881181Z","shell.execute_reply":"2025-04-21T05:25:50.941511Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 110527 entries, 0 to 110526\nData columns (total 14 columns):\n #   Column          Non-Null Count   Dtype  \n---  ------          --------------   -----  \n 0   PatientId       110527 non-null  float64\n 1   AppointmentID   110527 non-null  int64  \n 2   Gender          110527 non-null  object \n 3   ScheduledDay    110527 non-null  object \n 4   AppointmentDay  110527 non-null  object \n 5   Age             110527 non-null  int64  \n 6   Neighbourhood   110527 non-null  object \n 7   Scholarship     110527 non-null  int64  \n 8   Hipertension    110527 non-null  int64  \n 9   Diabetes        110527 non-null  int64  \n 10  Alcoholism      110527 non-null  int64  \n 11  Handcap         110527 non-null  int64  \n 12  SMS_received    110527 non-null  int64  \n 13  No-show         110527 non-null  object \ndtypes: float64(1), int64(8), object(5)\nmemory usage: 11.8+ MB\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"Count of Null Values of each column using **info() function**\n1. There are totaL values in each column is 110527\n2. Dtypes(Data Types:float64(1), int64(8), object(5))","metadata":{}},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T05:34:31.591112Z","iopub.execute_input":"2025-04-21T05:34:31.591415Z","iopub.status.idle":"2025-04-21T05:34:31.597468Z","shell.execute_reply.started":"2025-04-21T05:34:31.591391Z","shell.execute_reply":"2025-04-21T05:34:31.596560Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"(110527, 14)"},"metadata":{}}],"execution_count":11},{"cell_type":"markdown","source":"Shape of Data\n* 110527 Rows\n* 14 Column","metadata":{}},{"cell_type":"code","source":"df.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T05:38:02.040596Z","iopub.execute_input":"2025-04-21T05:38:02.041007Z","iopub.status.idle":"2025-04-21T05:38:02.047320Z","shell.execute_reply.started":"2025-04-21T05:38:02.040982Z","shell.execute_reply":"2025-04-21T05:38:02.046332Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"Index(['PatientId', 'AppointmentID', 'Gender', 'ScheduledDay',\n       'AppointmentDay', 'Age', 'Neighbourhood', 'Scholarship', 'Hipertension',\n       'Diabetes', 'Alcoholism', 'Handcap', 'SMS_received', 'No-show'],\n      dtype='object')"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T05:28:33.717574Z","iopub.execute_input":"2025-04-21T05:28:33.717957Z","iopub.status.idle":"2025-04-21T05:28:33.757217Z","shell.execute_reply.started":"2025-04-21T05:28:33.717894Z","shell.execute_reply":"2025-04-21T05:28:33.756466Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"PatientId         0\nAppointmentID     0\nGender            0\nScheduledDay      0\nAppointmentDay    0\nAge               0\nNeighbourhood     0\nScholarship       0\nHipertension      0\nDiabetes          0\nAlcoholism        0\nHandcap           0\nSMS_received      0\nNo-show           0\ndtype: int64"},"metadata":{}}],"execution_count":10},{"cell_type":"markdown","source":"**Sum(Total_Count)** of Null Values of each column\n* There are NoNUll values present in data","metadata":{}},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T05:38:18.741256Z","iopub.execute_input":"2025-04-21T05:38:18.741549Z","iopub.status.idle":"2025-04-21T05:38:18.767975Z","shell.execute_reply.started":"2025-04-21T05:38:18.741528Z","shell.execute_reply":"2025-04-21T05:38:18.767117Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"      PatientId  AppointmentID Gender          ScheduledDay  \\\n0  2.987250e+13        5642903      F  2016-04-29T18:38:08Z   \n1  5.589978e+14        5642503      M  2016-04-29T16:08:27Z   \n2  4.262962e+12        5642549      F  2016-04-29T16:19:04Z   \n3  8.679512e+11        5642828      F  2016-04-29T17:29:31Z   \n4  8.841186e+12        5642494      F  2016-04-29T16:07:23Z   \n\n         AppointmentDay  Age      Neighbourhood  Scholarship  Hipertension  \\\n0  2016-04-29T00:00:00Z   62    JARDIM DA PENHA            0             1   \n1  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             0   \n2  2016-04-29T00:00:00Z   62      MATA DA PRAIA            0             0   \n3  2016-04-29T00:00:00Z    8  PONTAL DE CAMBURI            0             0   \n4  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             1   \n\n   Diabetes  Alcoholism  Handcap  SMS_received No-show  \n0         0           0        0             0      No  \n1         0           0        0             0      No  \n2         0           0        0             0      No  \n3         0           0        0             0      No  \n4         1           0        0             0      No  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PatientId</th>\n      <th>AppointmentID</th>\n      <th>Gender</th>\n      <th>ScheduledDay</th>\n      <th>AppointmentDay</th>\n      <th>Age</th>\n      <th>Neighbourhood</th>\n      <th>Scholarship</th>\n      <th>Hipertension</th>\n      <th>Diabetes</th>\n      <th>Alcoholism</th>\n      <th>Handcap</th>\n      <th>SMS_received</th>\n      <th>No-show</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2.987250e+13</td>\n      <td>5642903</td>\n      <td>F</td>\n      <td>2016-04-29T18:38:08Z</td>\n      <td>2016-04-29T00:00:00Z</td>\n      <td>62</td>\n      <td>JARDIM DA PENHA</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.589978e+14</td>\n      <td>5642503</td>\n      <td>M</td>\n      <td>2016-04-29T16:08:27Z</td>\n      <td>2016-04-29T00:00:00Z</td>\n      <td>56</td>\n      <td>JARDIM DA PENHA</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.262962e+12</td>\n      <td>5642549</td>\n      <td>F</td>\n      <td>2016-04-29T16:19:04Z</td>\n      <td>2016-04-29T00:00:00Z</td>\n      <td>62</td>\n      <td>MATA DA PRAIA</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.679512e+11</td>\n      <td>5642828</td>\n      <td>F</td>\n      <td>2016-04-29T17:29:31Z</td>\n      <td>2016-04-29T00:00:00Z</td>\n      <td>8</td>\n      <td>PONTAL DE CAMBURI</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8.841186e+12</td>\n      <td>5642494</td>\n      <td>F</td>\n      <td>2016-04-29T16:07:23Z</td>\n      <td>2016-04-29T00:00:00Z</td>\n      <td>56</td>\n      <td>JARDIM DA PENHA</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":18},{"cell_type":"markdown","source":"Top 5 Values from data use **df.head()**","metadata":{}},{"cell_type":"code","source":"df.duplicated().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T05:41:43.514394Z","iopub.execute_input":"2025-04-21T05:41:43.514780Z","iopub.status.idle":"2025-04-21T05:41:43.602363Z","shell.execute_reply.started":"2025-04-21T05:41:43.514755Z","shell.execute_reply":"2025-04-21T05:41:43.601274Z"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"df.drop_duplicates(inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T05:43:43.986628Z","iopub.execute_input":"2025-04-21T05:43:43.986999Z","iopub.status.idle":"2025-04-21T05:43:44.077326Z","shell.execute_reply.started":"2025-04-21T05:43:43.986972Z","shell.execute_reply":"2025-04-21T05:43:44.076288Z"}},"outputs":[],"execution_count":22},{"cell_type":"markdown","source":"There is no duplicate data","metadata":{}},{"cell_type":"markdown","source":"\n## Convert date columns to datetime","metadata":{}},{"cell_type":"code","source":"df['ScheduledDay'] = pd.to_datetime(df['ScheduledDay'])\n\ndf['AppointmentDay'] = pd.to_datetime(df['AppointmentDay'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T05:54:39.893148Z","iopub.execute_input":"2025-04-21T05:54:39.893536Z","iopub.status.idle":"2025-04-21T05:54:40.047206Z","shell.execute_reply.started":"2025-04-21T05:54:39.893505Z","shell.execute_reply":"2025-04-21T05:54:40.046049Z"}},"outputs":[],"execution_count":24},{"cell_type":"markdown","source":"Change to datetime format using function **to_datetime** of two column [ScheduledDay,AppointmentDay]","metadata":{}},{"cell_type":"code","source":"df['PatientId']=df['PatientId'].astype('str')\ndf['AppointmentID']=df['AppointmentID'].astype('str')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T06:39:15.557408Z","iopub.execute_input":"2025-04-21T06:39:15.557675Z","iopub.status.idle":"2025-04-21T06:39:15.606354Z","shell.execute_reply.started":"2025-04-21T06:39:15.557657Z","shell.execute_reply":"2025-04-21T06:39:15.605117Z"}},"outputs":[],"execution_count":78},{"cell_type":"markdown","source":"Coverting Datatype Float to String of **[PatientId,AppointmentID]**","metadata":{}},{"cell_type":"code","source":"# Calculate wait time in days\ndf['WaitDays'] = (df['AppointmentDay'] - df['ScheduledDay']).dt.days","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T06:44:50.066399Z","iopub.execute_input":"2025-04-21T06:44:50.066702Z","iopub.status.idle":"2025-04-21T06:44:50.079472Z","shell.execute_reply.started":"2025-04-21T06:44:50.066673Z","shell.execute_reply":"2025-04-21T06:44:50.078459Z"}},"outputs":[],"execution_count":84},{"cell_type":"code","source":"#Clean Data\ndf = df[(df['Age'] >= 1) & (df['Age'] <= 100)]\ndf['No-show'].value_counts()\n\n#The percentage of No-show\ndf['No-show'].value_counts(normalize=True) * 100","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T06:48:18.320478Z","iopub.execute_input":"2025-04-21T06:48:18.320766Z","iopub.status.idle":"2025-04-21T06:48:18.358340Z","shell.execute_reply.started":"2025-04-21T06:48:18.320745Z","shell.execute_reply":"2025-04-21T06:48:18.357230Z"}},"outputs":[{"execution_count":88,"output_type":"execute_result","data":{"text/plain":"No-show\nNo     79.737334\nYes    20.262666\nName: proportion, dtype: float64"},"metadata":{}}],"execution_count":88},{"cell_type":"code","source":"df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T06:48:24.586297Z","iopub.execute_input":"2025-04-21T06:48:24.586597Z","iopub.status.idle":"2025-04-21T06:48:24.603049Z","shell.execute_reply.started":"2025-04-21T06:48:24.586573Z","shell.execute_reply":"2025-04-21T06:48:24.601915Z"}},"outputs":[{"execution_count":89,"output_type":"execute_result","data":{"text/plain":"              PatientId AppointmentID Gender              ScheduledDay  \\\n0        29872499824296       5642903      F 2016-04-29 18:38:08+00:00   \n1       558997776694438       5642503      M 2016-04-29 16:08:27+00:00   \n2         4262962299951       5642549      F 2016-04-29 16:19:04+00:00   \n3          867951213174       5642828      F 2016-04-29 17:29:31+00:00   \n4         8841186448183       5642494      F 2016-04-29 16:07:23+00:00   \n...                 ...           ...    ...                       ...   \n110522    2572134369293       5651768      F 2016-05-03 09:15:35+00:00   \n110523    3596266328735       5650093      F 2016-05-03 07:27:33+00:00   \n110524   15576631729893       5630692      F 2016-04-27 16:03:52+00:00   \n110525   92134931435557       5630323      F 2016-04-27 15:09:23+00:00   \n110526  377511518121127       5629448      F 2016-04-27 13:30:56+00:00   \n\n                  AppointmentDay  Age      Neighbourhood  Scholarship  \\\n0      2016-04-29 00:00:00+00:00   62    JARDIM DA PENHA            0   \n1      2016-04-29 00:00:00+00:00   56    JARDIM DA PENHA            0   \n2      2016-04-29 00:00:00+00:00   62      MATA DA PRAIA            0   \n3      2016-04-29 00:00:00+00:00    8  PONTAL DE CAMBURI            0   \n4      2016-04-29 00:00:00+00:00   56    JARDIM DA PENHA            0   \n...                          ...  ...                ...          ...   \n110522 2016-06-07 00:00:00+00:00   56        MARIA ORTIZ            0   \n110523 2016-06-07 00:00:00+00:00   51        MARIA ORTIZ            0   \n110524 2016-06-07 00:00:00+00:00   21        MARIA ORTIZ            0   \n110525 2016-06-07 00:00:00+00:00   38        MARIA ORTIZ            0   \n110526 2016-06-07 00:00:00+00:00   54        MARIA ORTIZ            0   \n\n        Hipertension  Diabetes  Alcoholism  Handcap  SMS_received No-show  \\\n0                  1         0           0        0             0      No   \n1                  0         0           0        0             0      No   \n2                  0         0           0        0             0      No   \n3                  0         0           0        0             0      No   \n4                  1         1           0        0             0      No   \n...              ...       ...         ...      ...           ...     ...   \n110522             0         0           0        0             1      No   \n110523             0         0           0        0             1      No   \n110524             0         0           0        0             1      No   \n110525             0         0           0        0             1      No   \n110526             0         0           0        0             1      No   \n\n        WaitDays  \n0             -1  \n1             -1  \n2             -1  \n3             -1  \n4             -1  \n...          ...  \n110522        34  \n110523        34  \n110524        40  \n110525        40  \n110526        40  \n\n[106980 rows x 15 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PatientId</th>\n      <th>AppointmentID</th>\n      <th>Gender</th>\n      <th>ScheduledDay</th>\n      <th>AppointmentDay</th>\n      <th>Age</th>\n      <th>Neighbourhood</th>\n      <th>Scholarship</th>\n      <th>Hipertension</th>\n      <th>Diabetes</th>\n      <th>Alcoholism</th>\n      <th>Handcap</th>\n      <th>SMS_received</th>\n      <th>No-show</th>\n      <th>WaitDays</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>29872499824296</td>\n      <td>5642903</td>\n      <td>F</td>\n      <td>2016-04-29 18:38:08+00:00</td>\n      <td>2016-04-29 00:00:00+00:00</td>\n      <td>62</td>\n      <td>JARDIM DA PENHA</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>558997776694438</td>\n      <td>5642503</td>\n      <td>M</td>\n      <td>2016-04-29 16:08:27+00:00</td>\n      <td>2016-04-29 00:00:00+00:00</td>\n      <td>56</td>\n      <td>JARDIM DA PENHA</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4262962299951</td>\n      <td>5642549</td>\n      <td>F</td>\n      <td>2016-04-29 16:19:04+00:00</td>\n      <td>2016-04-29 00:00:00+00:00</td>\n      <td>62</td>\n      <td>MATA DA PRAIA</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>867951213174</td>\n      <td>5642828</td>\n      <td>F</td>\n      <td>2016-04-29 17:29:31+00:00</td>\n      <td>2016-04-29 00:00:00+00:00</td>\n      <td>8</td>\n      <td>PONTAL DE CAMBURI</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8841186448183</td>\n      <td>5642494</td>\n      <td>F</td>\n      <td>2016-04-29 16:07:23+00:00</td>\n      <td>2016-04-29 00:00:00+00:00</td>\n      <td>56</td>\n      <td>JARDIM DA PENHA</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>110522</th>\n      <td>2572134369293</td>\n      <td>5651768</td>\n      <td>F</td>\n      <td>2016-05-03 09:15:35+00:00</td>\n      <td>2016-06-07 00:00:00+00:00</td>\n      <td>56</td>\n      <td>MARIA ORTIZ</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>No</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>110523</th>\n      <td>3596266328735</td>\n      <td>5650093</td>\n      <td>F</td>\n      <td>2016-05-03 07:27:33+00:00</td>\n      <td>2016-06-07 00:00:00+00:00</td>\n      <td>51</td>\n      <td>MARIA ORTIZ</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>No</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>110524</th>\n      <td>15576631729893</td>\n      <td>5630692</td>\n      <td>F</td>\n      <td>2016-04-27 16:03:52+00:00</td>\n      <td>2016-06-07 00:00:00+00:00</td>\n      <td>21</td>\n      <td>MARIA ORTIZ</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>No</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>110525</th>\n      <td>92134931435557</td>\n      <td>5630323</td>\n      <td>F</td>\n      <td>2016-04-27 15:09:23+00:00</td>\n      <td>2016-06-07 00:00:00+00:00</td>\n      <td>38</td>\n      <td>MARIA ORTIZ</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>No</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>110526</th>\n      <td>377511518121127</td>\n      <td>5629448</td>\n      <td>F</td>\n      <td>2016-04-27 13:30:56+00:00</td>\n      <td>2016-06-07 00:00:00+00:00</td>\n      <td>54</td>\n      <td>MARIA ORTIZ</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>No</td>\n      <td>40</td>\n    </tr>\n  </tbody>\n</table>\n<p>106980 rows × 15 columns</p>\n</div>"},"metadata":{}}],"execution_count":89},{"cell_type":"code","source":"df.describe(include = 'all')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T06:48:25.756205Z","iopub.execute_input":"2025-04-21T06:48:25.756481Z","iopub.status.idle":"2025-04-21T06:48:26.022104Z","shell.execute_reply.started":"2025-04-21T06:48:25.756460Z","shell.execute_reply":"2025-04-21T06:48:26.020930Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":90,"output_type":"execute_result","data":{"text/plain":"              PatientId AppointmentID  Gender  \\\ncount            106980        106980  106980   \nunique            60266        106980       2   \ntop     822145925426128       5642903       F   \nfreq                 88             1   70111   \nmean                NaN           NaN     NaN   \nmin                 NaN           NaN     NaN   \n25%                 NaN           NaN     NaN   \n50%                 NaN           NaN     NaN   \n75%                 NaN           NaN     NaN   \nmax                 NaN           NaN     NaN   \nstd                 NaN           NaN     NaN   \n\n                               ScheduledDay  \\\ncount                                106980   \nunique                                  NaN   \ntop                                     NaN   \nfreq                                    NaN   \nmean    2016-05-09 08:34:17.235212032+00:00   \nmin               2015-11-10 07:13:56+00:00   \n25%     2016-04-29 10:49:09.750000128+00:00   \n50%               2016-05-10 12:32:20+00:00   \n75%     2016-05-20 11:32:05.750000128+00:00   \nmax               2016-06-08 20:07:23+00:00   \nstd                                     NaN   \n\n                             AppointmentDay            Age   Neighbourhood  \\\ncount                                106980  106980.000000          106980   \nunique                                  NaN            NaN              81   \ntop                                     NaN            NaN  JARDIM CAMBURI   \nfreq                                    NaN            NaN            7586   \nmean    2016-05-19 01:18:41.390914304+00:00      38.311311             NaN   \nmin               2016-04-29 00:00:00+00:00       1.000000             NaN   \n25%               2016-05-09 00:00:00+00:00      19.000000             NaN   \n50%               2016-05-18 00:00:00+00:00      38.000000             NaN   \n75%               2016-05-31 00:00:00+00:00      56.000000             NaN   \nmax               2016-06-08 00:00:00+00:00     100.000000             NaN   \nstd                                     NaN      22.459144             NaN   \n\n          Scholarship   Hipertension       Diabetes     Alcoholism  \\\ncount   106980.000000  106980.000000  106980.000000  106980.000000   \nunique            NaN            NaN            NaN            NaN   \ntop               NaN            NaN            NaN            NaN   \nfreq              NaN            NaN            NaN            NaN   \nmean         0.101038       0.203776       0.074248       0.031408   \nmin          0.000000       0.000000       0.000000       0.000000   \n25%          0.000000       0.000000       0.000000       0.000000   \n50%          0.000000       0.000000       0.000000       0.000000   \n75%          0.000000       0.000000       0.000000       0.000000   \nmax          1.000000       1.000000       1.000000       1.000000   \nstd          0.301380       0.402807       0.262175       0.174418   \n\n              Handcap   SMS_received No-show       WaitDays  \ncount   106980.000000  106980.000000  106980  106980.000000  \nunique            NaN            NaN       2            NaN  \ntop               NaN            NaN      No            NaN  \nfreq              NaN            NaN   85303            NaN  \nmean         0.022939       0.323275     NaN       9.166816  \nmin          0.000000       0.000000     NaN      -7.000000  \n25%          0.000000       0.000000     NaN      -1.000000  \n50%          0.000000       0.000000     NaN       3.000000  \n75%          0.000000       1.000000     NaN      13.000000  \nmax          4.000000       1.000000     NaN     178.000000  \nstd          0.164011       0.467729     NaN      15.263647  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PatientId</th>\n      <th>AppointmentID</th>\n      <th>Gender</th>\n      <th>ScheduledDay</th>\n      <th>AppointmentDay</th>\n      <th>Age</th>\n      <th>Neighbourhood</th>\n      <th>Scholarship</th>\n      <th>Hipertension</th>\n      <th>Diabetes</th>\n      <th>Alcoholism</th>\n      <th>Handcap</th>\n      <th>SMS_received</th>\n      <th>No-show</th>\n      <th>WaitDays</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>106980</td>\n      <td>106980</td>\n      <td>106980</td>\n      <td>106980</td>\n      <td>106980</td>\n      <td>106980.000000</td>\n      <td>106980</td>\n      <td>106980.000000</td>\n      <td>106980.000000</td>\n      <td>106980.000000</td>\n      <td>106980.000000</td>\n      <td>106980.000000</td>\n      <td>106980.000000</td>\n      <td>106980</td>\n      <td>106980.000000</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>60266</td>\n      <td>106980</td>\n      <td>2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>81</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>822145925426128</td>\n      <td>5642903</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>JARDIM CAMBURI</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>No</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>88</td>\n      <td>1</td>\n      <td>70111</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>7586</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>85303</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2016-05-09 08:34:17.235212032+00:00</td>\n      <td>2016-05-19 01:18:41.390914304+00:00</td>\n      <td>38.311311</td>\n      <td>NaN</td>\n      <td>0.101038</td>\n      <td>0.203776</td>\n      <td>0.074248</td>\n      <td>0.031408</td>\n      <td>0.022939</td>\n      <td>0.323275</td>\n      <td>NaN</td>\n      <td>9.166816</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2015-11-10 07:13:56+00:00</td>\n      <td>2016-04-29 00:00:00+00:00</td>\n      <td>1.000000</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>-7.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2016-04-29 10:49:09.750000128+00:00</td>\n      <td>2016-05-09 00:00:00+00:00</td>\n      <td>19.000000</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>-1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2016-05-10 12:32:20+00:00</td>\n      <td>2016-05-18 00:00:00+00:00</td>\n      <td>38.000000</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2016-05-20 11:32:05.750000128+00:00</td>\n      <td>2016-05-31 00:00:00+00:00</td>\n      <td>56.000000</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>NaN</td>\n      <td>13.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2016-06-08 20:07:23+00:00</td>\n      <td>2016-06-08 00:00:00+00:00</td>\n      <td>100.000000</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>4.000000</td>\n      <td>1.000000</td>\n      <td>NaN</td>\n      <td>178.000000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>22.459144</td>\n      <td>NaN</td>\n      <td>0.301380</td>\n      <td>0.402807</td>\n      <td>0.262175</td>\n      <td>0.174418</td>\n      <td>0.164011</td>\n      <td>0.467729</td>\n      <td>NaN</td>\n      <td>15.263647</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":90},{"cell_type":"markdown","source":"use **Describe Function** for data intigrity","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T06:48:32.126172Z","iopub.execute_input":"2025-04-21T06:48:32.126464Z","iopub.status.idle":"2025-04-21T06:48:32.174129Z","shell.execute_reply.started":"2025-04-21T06:48:32.126442Z","shell.execute_reply":"2025-04-21T06:48:32.173194Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 106980 entries, 0 to 110526\nData columns (total 15 columns):\n #   Column          Non-Null Count   Dtype              \n---  ------          --------------   -----              \n 0   PatientId       106980 non-null  object             \n 1   AppointmentID   106980 non-null  object             \n 2   Gender          106980 non-null  object             \n 3   ScheduledDay    106980 non-null  datetime64[ns, UTC]\n 4   AppointmentDay  106980 non-null  datetime64[ns, UTC]\n 5   Age             106980 non-null  int64              \n 6   Neighbourhood   106980 non-null  object             \n 7   Scholarship     106980 non-null  int64              \n 8   Hipertension    106980 non-null  int64              \n 9   Diabetes        106980 non-null  int64              \n 10  Alcoholism      106980 non-null  int64              \n 11  Handcap         106980 non-null  int64              \n 12  SMS_received    106980 non-null  int64              \n 13  No-show         106980 non-null  object             \n 14  WaitDays        106980 non-null  int64              \ndtypes: datetime64[ns, UTC](2), int64(8), object(5)\nmemory usage: 13.1+ MB\n","output_type":"stream"}],"execution_count":91},{"cell_type":"markdown","source":"**Summary**\nThis gives you a clean DataFrame with:\n\nNo missing values in PatientId or Diabetes.\n\nNo duplicate PatientId.\n\nProper data types (PatientId as string, Diabetes as binary int).","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}
